				// for crazy colours, jsut do newImage.setRGB(x, y,
				// img[0].getRGB - img[1].getRGB);



	/**
	 * Returns the image flipped vertically.
	 * 
	 * @param img
	 *            The input image.
	 * @return The image flipped vertically.
	 */
	public static BufferedImage vflipImage(BufferedImage img) {
		int height = img.getHeight();
		int width = img.getWidth();

		BufferedImage newImage = new BufferedImage(width, height,
				BufferedImage.TYPE_INT_RGB);

		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				newImage.setRGB(x, height - y - 1, img.getRGB(x, y));
			}
		}
		return newImage;
	}

	/**
	 * Returns the image flipped horizontally.
	 * 
	 * @param img
	 *            The input image.
	 * @return The image flipped horizontally.
	 */
	public static BufferedImage hflipImage(BufferedImage img) {
		int height = img.getHeight();
		int width = img.getWidth();

		BufferedImage newImage = new BufferedImage(width, height,
				BufferedImage.TYPE_INT_RGB);

		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				newImage.setRGB(width - x - 1, y, img.getRGB(x, y));
			}
		}
		return newImage;
	}





//
//	public static BufferedImage averageBlur(BufferedImage img) {
//		int height = img.getHeight();
//		int width = img.getWidth();
//
//		BufferedImage newImage = new BufferedImage(width, height,
//				BufferedImage.TYPE_INT_RGB);
//
//		Color[] colours15 = new Color[15];
//		Color[] colours20 = new Color[20];
//		Color[] colours25 = new Color[25];
//		int red, green, blue;
//
//		// top middle
//		for (int x = 2; x < width - 2; x++) {
//			red = 0;
//			green = 0;
//			blue = 0;
//			// middle row
//			colours15[0] = new Color(img.getRGB(x - 2, 0));
//			colours15[1] = new Color(img.getRGB(x - 1, 0));
//			colours15[2] = new Color(img.getRGB(x, 0));
//			colours15[3] = new Color(img.getRGB(x + 1, 0));
//			colours15[4] = new Color(img.getRGB(x + 2, 0));
//			// 4th row
//			colours15[5] = new Color(img.getRGB(x - 2, 1));
//			colours15[6] = new Color(img.getRGB(x - 1, 1));
//			colours15[7] = new Color(img.getRGB(x, 1));
//			colours15[8] = new Color(img.getRGB(x + 1, 1));
//			colours15[9] = new Color(img.getRGB(x + 2, 1));
//			// 5th row
//			colours15[10] = new Color(img.getRGB(x - 2, 2));
//			colours15[11] = new Color(img.getRGB(x - 1, 2));
//			colours15[12] = new Color(img.getRGB(x, 2));
//			colours15[13] = new Color(img.getRGB(x + 1, 2));
//			colours15[14] = new Color(img.getRGB(x + 2, 2));
//
//			// get average colour
//			for (Color cellColour : colours15) {
//				red += cellColour.getRed();
//				green += cellColour.getGreen();
//				blue += cellColour.getBlue();
//			}
//			red = red / 15;
//			green = green / 15;
//			blue = blue / 15;
//			Color newColour = new Color(red, green, blue);
//
//			newImage.setRGB(x, 0, newColour.getRGB());
//		}
//
//		// top2 middle
//		for (int x = 2; x < width - 2; x++) {
//			red = 0;
//			green = 0;
//			blue = 0;
//			// 2nd row
//			colours20[0] = new Color(img.getRGB(x - 2, 0));
//			colours20[1] = new Color(img.getRGB(x - 1, 0));
//			colours20[2] = new Color(img.getRGB(x, 0));
//			colours20[3] = new Color(img.getRGB(x + 1, 0));
//			colours20[4] = new Color(img.getRGB(x + 2, 0));
//			// middle row
//			colours20[5] = new Color(img.getRGB(x - 2, 1));
//			colours20[6] = new Color(img.getRGB(x - 1, 1));
//			colours20[7] = new Color(img.getRGB(x, 0));
//			colours20[8] = new Color(img.getRGB(x + 1, 1));
//			colours20[9] = new Color(img.getRGB(x + 2, 1));
//			// 4th row
//			colours20[10] = new Color(img.getRGB(x - 2, 2));
//			colours20[11] = new Color(img.getRGB(x - 1, 2));
//			colours20[12] = new Color(img.getRGB(x, 1));
//			colours20[13] = new Color(img.getRGB(x + 1, 2));
//			colours20[14] = new Color(img.getRGB(x + 2, 2));
//			// 5th row
//			colours20[15] = new Color(img.getRGB(x - 2, 3));
//			colours20[16] = new Color(img.getRGB(x - 1, 3));
//			colours20[17] = new Color(img.getRGB(x, 3));
//			colours20[18] = new Color(img.getRGB(x + 1, 3));
//			colours20[19] = new Color(img.getRGB(x + 2, 3));
//
//			// get average colour
//			for (Color cellColour : colours15) {
//				red += cellColour.getRed();
//				green += cellColour.getGreen();
//				blue += cellColour.getBlue();
//			}
//			red = red / 15;
//			green = green / 15;
//			blue = blue / 15;
//			Color newColour = new Color(red, green, blue);
//
//			newImage.setRGB(x, 1, newColour.getRGB());
//		}
//
//		// main part of image
//		for (int x = 2; x < width - 2; x++) {
//			for (int y = 2; y < height - 2; y++) {
//				// reset colours
//				red = 0;
//				green = 0;
//				blue = 0;
//
//				// top row
//				colours25[0] = new Color(img.getRGB(x - 2, y - 2));
//				colours25[1] = new Color(img.getRGB(x - 1, y - 2));
//				colours25[2] = new Color(img.getRGB(x, y - 2));
//				colours25[3] = new Color(img.getRGB(x + 1, y - 2));
//				colours25[4] = new Color(img.getRGB(x + 2, y - 2));
//				// 2nd row
//				colours25[5] = new Color(img.getRGB(x - 2, y - 1));
//				colours25[6] = new Color(img.getRGB(x - 1, y - 1));
//				colours25[7] = new Color(img.getRGB(x, y - 1));
//				colours25[8] = new Color(img.getRGB(x + 1, y - 1));
//				colours25[9] = new Color(img.getRGB(x + 2, y - 1));
//				// middle row
//				colours25[10] = new Color(img.getRGB(x - 2, y));
//				colours25[11] = new Color(img.getRGB(x - 1, y));
//				colours25[12] = new Color(img.getRGB(x, y));
//				colours25[13] = new Color(img.getRGB(x + 1, y));
//				colours25[14] = new Color(img.getRGB(x + 2, y));
//				// 4th row
//				colours25[15] = new Color(img.getRGB(x - 2, y + 1));
//				colours25[16] = new Color(img.getRGB(x - 1, y + 1));
//				colours25[17] = new Color(img.getRGB(x, y + 1));
//				colours25[18] = new Color(img.getRGB(x + 1, y + 1));
//				colours25[19] = new Color(img.getRGB(x + 2, y + 1));
//				// 5th row
//				colours25[20] = new Color(img.getRGB(x - 2, y + 2));
//				colours25[21] = new Color(img.getRGB(x - 1, y + 2));
//				colours25[22] = new Color(img.getRGB(x, y + 2));
//				colours25[23] = new Color(img.getRGB(x + 1, y + 2));
//				colours25[24] = new Color(img.getRGB(x + 2, y + 2));
//
//				// get average colour
//				for (Color cellColour : colours25) {
//					red += cellColour.getRed();
//					green += cellColour.getGreen();
//					blue += cellColour.getBlue();
//				}
//				red = red / 25;
//				green = green / 25;
//				blue = blue / 25;
//				Color newColour = new Color(red, green, blue);
//
//				newImage.setRGB(x, y, newColour.getRGB());
//			}
//		}
//
//		return newImage;
//	}